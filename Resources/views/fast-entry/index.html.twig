{% extends 'base.html.twig' %}

{% block main %}
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">{% trans %}Fast Entry{% endtrans %}</h3>
                    </div>
                    <div class="card-body">
                        {{ form_start(form) }}

                        <table class="table">
                            <thead>
                                <tr>
                                    <th>{% trans %}Customer{% endtrans %}</th>
                                    <th>{% trans %}Project{% endtrans %}</th>
                                    <th>{% trans %}Date{% endtrans %}</th>
                                    <th>{% trans %}Duration{% endtrans %}</th>
                                    <th>{% trans %}Description{% endtrans %}</th>
                                    <th>{% trans %}Billable{% endtrans %}</th>
                                    <th></th> <!-- Remove button column -->
                                </tr>
                            </thead>
                            <tbody data-prototype="{{ form_widget(form.entries.vars.prototype)|e('html_attr') }}">
                                {% for entry in form.entries %}
                                    <tr class="entry-group">
                                        <td>{{ form_widget(entry.customer) }}</td>
                                        <td>{{ form_widget(entry.project) }}</td>
                                        <td>{{ form_widget(entry.date) }}</td>
                                        <td>{{ form_widget(entry.duration) }}</td>
                                        <td>{{ form_widget(entry.description) }}</td>
                                        <td>{{ form_widget(entry.billable) }}</td>
                                        <td>
                                            <button type="button" class="btn btn-danger remove-entry">Remove</button>
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>

                        <button type="button" class="btn btn-secondary mt-3" id="add-entry">{% trans %}Add Entry{% endtrans %}</button>
                        <button type="submit" class="btn btn-primary mt-3">{% trans %}Submit{% endtrans %}</button>

                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const addEntryButton = document.getElementById('add-entry');
            const collectionHolder = document.querySelector('tbody[data-prototype]');

            if (!addEntryButton || !collectionHolder) {
                console.error('Add Entry button or Collection Holder not found.');
                return;
            }

            function addEntryForm() {
                const prototype = collectionHolder.dataset.prototype;
                const index = collectionHolder.querySelectorAll('.entry-group').length;
                const newForm = prototype.replace(/__name__/g, index);

                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = newForm;
                const newFormRow = document.createElement('tr');
                newFormRow.classList.add('entry-group');

                // Create table cells for each form field
                tempDiv.querySelectorAll('div').forEach(div => {
                    const newCell = document.createElement('td');
                    newCell.innerHTML = div.innerHTML;
                    newFormRow.appendChild(newCell);
                });

                // Add the remove button to the last cell
                const removeCell = document.createElement('td');
                removeCell.innerHTML = '<button type="button" class="btn btn-danger remove-entry">{% trans %}Remove{% endtrans %}</button>';
                newFormRow.appendChild(removeCell);

                collectionHolder.appendChild(newFormRow);

                // Add event listeners for the new form row
                addEventListeners(newFormRow);
            }

            function addEventListeners(row) {
                const customerSelect = row.querySelector('select[name$="[customer]"]');
                const projectSelect = row.querySelector('select[name$="[project]"]');

                if (customerSelect && projectSelect) {
                    customerSelect.addEventListener('change', function () {
                        filterProjects(customerSelect, projectSelect);
                    });

                    projectSelect.addEventListener('change', function () {
                        if (!customerSelect.value) {
                            setCustomerFromProject(projectSelect, customerSelect);
                        }
                    });
                }

                row.querySelector('.remove-entry').addEventListener('click', function () {
                    row.remove();
                });
            }

            function filterProjects(customerSelect, projectSelect) {
                const customerId = customerSelect.value;
                const options = projectSelect.querySelectorAll('option');

                options.forEach(option => {
                    if (option.dataset.customerId && option.dataset.customerId !== customerId) {
                        option.style.display = 'none';
                    } else {
                        option.style.display = 'block';
                    }
                });

                projectSelect.value = '';
            }

            function setCustomerFromProject(projectSelect, customerSelect) {
                const selectedOption = projectSelect.selectedOptions[0];
                if (selectedOption && selectedOption.dataset.customerId) {
                    customerSelect.value = selectedOption.dataset.customerId;
                }
            }

            addEntryButton.addEventListener('click', addEntryForm);

            collectionHolder.querySelectorAll('.entry-group').forEach(addEventListeners);
        });
    </script>
{% endblock %}