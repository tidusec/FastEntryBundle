{% extends 'base.html.twig' %}

{% block main %}
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">{% trans %}Fast Entry{% endtrans %}</h3>
                    </div>
                    <div class="card-body">
                        {{ form_start(form, {'attr': {'class': 'time-matrix-form'}}) }}
                        
                        <div class="table-responsive">
                            <table class="table table-bordered table-striped">
                                <thead>
                                    <tr>
                                        <th width="15%">Client</th>
                                        <th width="15%">Matter</th>
                                        <th width="10%">Date</th>
                                        <th width="10%">Duration (HH:MM)</th>
                                        <th width="35%">Description</th>
                                        <th width="5%">Billable</th>
                                        <th width="10%">Actions</th>
                                    </tr>
                                </thead>
                                <tbody class="time-entries" data-prototype="{{ form_widget(form.entries.vars.prototype)|e('html_attr') }}">
                                    {% for entry in form.entries %}
                                        <tr class="entry-group">
                                            <td>{{ form_widget(entry.customer, {'attr': {'class': 'form-control customer-select'}}) }}</td>
                                            <td>{{ form_widget(entry.project, {'attr': {'class': 'form-control project-select'}}) }}</td>
                                            <td>{{ form_widget(entry.date, {'attr': {'class': 'form-control'}}) }}</td>
                                            <td>{{ form_widget(entry.duration, {'attr': {'class': 'form-control'}}) }}</td>
                                            <td>{{ form_widget(entry.description, {'attr': {'class': 'form-control'}}) }}</td>
                                            <td class="text-center">{{ form_widget(entry.billable) }}</td>
                                            <td class="text-center">
                                                <button type="button" class="btn btn-danger btn-sm remove-entry">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                        </div>

                        <div class="form-actions mt-3">
                            <button type="button" class="btn btn-success" id="add-entry">
                                <i class="fas fa-plus"></i> {% trans %}Add Entry{% endtrans %}
                            </button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> {% trans %}Submit{% endtrans %}
                            </button>
                        </div>

                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const addEntryButton = document.getElementById('add-entry');
            const collectionHolder = document.querySelector('.time-entries');

            if (!addEntryButton || !collectionHolder) {
                console.error('Required elements not found');
                return;
            }

            function addEntryForm() {
                const prototype = collectionHolder.dataset.prototype;
                const index = collectionHolder.querySelectorAll('.entry-group').length;
                
                // Create a new row
                const newRow = document.createElement('tr');
                newRow.classList.add('entry-group');
                
                // Replace prototype placeholders and create cells
                const formContent = prototype.replace(/__name__/g, index);
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = formContent;
                
                // Create cells for each form field
                const cells = [
                    createCell(tempDiv, '[customer]', 'form-control customer-select'),
                    createCell(tempDiv, '[project]', 'form-control project-select'),
                    createCell(tempDiv, '[date]', 'form-control'),
                    createCell(tempDiv, '[duration]', 'form-control'),
                    createCell(tempDiv, '[description]', 'form-control'),
                    createCell(tempDiv, '[billable]', '', 'text-center'),
                    createRemoveButtonCell()
                ];
                
                cells.forEach(cell => newRow.appendChild(cell));
                collectionHolder.appendChild(newRow);
                
                // Add event listeners
                addEventListeners(newRow);
            }

            function createCell(container, fieldNameEnd, className = '', extraClass = '') {
                const cell = document.createElement('td');
                if (extraClass) {
                    cell.className = extraClass;
                }
                const field = container.querySelector(`[name$="${fieldNameEnd}"]`);
                if (field) {
                    field.className = className;
                    cell.appendChild(field);
                }
                return cell;
            }

            function createRemoveButtonCell() {
                const cell = document.createElement('td');
                cell.className = 'text-center';
                cell.innerHTML = '<button type="button" class="btn btn-danger btn-sm remove-entry"><i class="fas fa-trash"></i></button>';
                return cell;
            }

            function addEventListeners(row) {
                const customerSelect = row.querySelector('.customer-select');
                const projectSelect = row.querySelector('.project-select');
                const removeButton = row.querySelector('.remove-entry');

                if (customerSelect && projectSelect) {
                    customerSelect.addEventListener('change', () => filterProjects(customerSelect, projectSelect));
                    projectSelect.addEventListener('change', () => {
                        if (!customerSelect.value) {
                            setCustomerFromProject(projectSelect, customerSelect);
                        }
                    });
                }

                if (removeButton) {
                    removeButton.addEventListener('click', () => row.remove());
                }
            }

            // Existing filter and customer setting functions remain the same
            function filterProjects(customerSelect, projectSelect) {
                const customerId = customerSelect.value;
                projectSelect.querySelectorAll('option').forEach(option => {
                    option.style.display = (!option.dataset.customerId || option.dataset.customerId === customerId) ? '' : 'none';
                });
                projectSelect.value = '';
            }

            function setCustomerFromProject(projectSelect, customerSelect) {
                const selectedOption = projectSelect.selectedOptions[0];
                if (selectedOption?.dataset.customerId) {
                    customerSelect.value = selectedOption.dataset.customerId;
                }
            }

            // Initialize
            addEntryButton.addEventListener('click', addEntryForm);
            collectionHolder.querySelectorAll('.entry-group').forEach(addEventListeners);
        });
    </script>

    <style>
        .time-matrix-form .form-control {
            padding: 0.375rem 0.75rem;
            font-size: 0.9rem;
        }
        .time-matrix-form .btn-sm {
            padding: 0.25rem 0.5rem;
        }
        .time-entries td {
            vertical-align: middle;
        }
        .time-matrix-form select.form-control {
            width: 100%;
        }
    </style>
{% endblock %}